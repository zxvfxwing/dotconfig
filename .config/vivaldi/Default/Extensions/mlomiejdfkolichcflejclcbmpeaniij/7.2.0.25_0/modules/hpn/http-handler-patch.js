System.register(['../core/utils', '../core/http', './main'], function (_export) {
  'use strict';

  var utils, http, CliqzSecureMessage, OFFER_TELEMETRY, proxyHttpHandler;

  _export('overRideCliqzResults', overRideCliqzResults);

  function overRideCliqzResults() {
    if (utils.getPref('proxyNetwork', true) === false) return;

    if (!proxyHttpHandler) proxyHttpHandler = http.defaultHttpHandler;

    function httpHandler(method, url, callback, onerror, timeout, data, sync) {
      if (url.startsWith(utils.RESULTS_PROVIDER) && utils.getPref('hpn-queryv2', false)) {
        var query = url.replace(utils.RESULTS_PROVIDER, '');
        var uid = Math.floor(Math.random() * 10000000);
        CliqzSecureMessage.queriesID[uid] = callback;
        CliqzSecureMessage.wCrypto.postMessage({
          msg: { action: 'instant',
            type: 'cliqz',
            ts: '',
            ver: '1.5',
            payload: query,
            rp: utils.RESULTS_PROVIDER
          },
          uid: uid,
          type: 'instant',
          sourcemap: CliqzSecureMessage.sourceMap,
          upk: CliqzSecureMessage.uPK,
          dspk: CliqzSecureMessage.dsPK,
          sspk: CliqzSecureMessage.secureLogger,
          queryproxyip: CliqzSecureMessage.queryProxyIP
        });
        return null;
      } else if (url.startsWith(utils.RESULTS_PROVIDER_LOG)) {
        var query = url.replace(utils.RESULTS_PROVIDER_LOG, '');
        var uid = Math.floor(Math.random() * 10000000);
        CliqzSecureMessage.queriesID[uid] = callback;
        CliqzSecureMessage.wCrypto.postMessage({
          msg: { action: 'extension-result-telemetry',
            type: 'cliqz',
            ts: '',
            ver: '1.5',
            payload: query
          },
          uid: uid,
          type: 'instant',
          sourcemap: CliqzSecureMessage.sourceMap,
          upk: CliqzSecureMessage.uPK,
          dspk: CliqzSecureMessage.dsPK,
          sspk: CliqzSecureMessage.secureLogger,
          queryproxyip: CliqzSecureMessage.queryProxyIP
        });
        return null;
      } else if (url === utils.SAFE_BROWSING) {
        var batch = JSON.parse(data);
        if (batch.length > 0) {
          batch.forEach(function (eachMsg) {
            CliqzSecureMessage.telemetry(eachMsg);
          });
        }
        callback && callback({ 'response': '{"success":true}' });
      } else if (url === OFFER_TELEMETRY) {
        var batch = JSON.parse(data);
        CliqzSecureMessage.telemetry(batch);
        callback && callback({ 'response': '{"success":true}' });
      } else {
        return proxyHttpHandler.apply(undefined, arguments);
      }
      return null;
    };

    http.overrideHttpHandler(httpHandler);
    http.addCompressionExclusion(utils.SAFE_BROWSING);
  }

  return {
    setters: [function (_coreUtils) {
      utils = _coreUtils['default'];
    }, function (_coreHttp) {
      http = _coreHttp;
    }, function (_main) {
      CliqzSecureMessage = _main['default'];
    }],
    execute: function () {
      OFFER_TELEMETRY = 'https://offers-api.cliqz.com/api/v1/savesignal';
      proxyHttpHandler = null;
    }
  };
});
//# sourceMappingURL=data:application/json;base64,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QUksR0FBRyxLQUFLLEtBQUssQ0FBQyxhQUFhLEVBQUU7QUFDdEMsWUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUMvQixZQUFJLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO0FBQ3BCLGVBQUssQ0FBQyxPQUFPLENBQUMsVUFBQSxPQUFPLEVBQUk7QUFDdkIsOEJBQWtCLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1dBQ3ZDLENBQUMsQ0FBQztTQUNKO0FBQ0QsZ0JBQVEsSUFBSSxRQUFRLENBQUMsRUFBRSxVQUFVLEVBQUUsa0JBQWtCLEVBQUUsQ0FBQyxDQUFDO09BQzFELE1BQU0sSUFBSSxHQUFHLEtBQUssZUFBZSxFQUFFO0FBQ2xDLFlBQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDL0IsMEJBQWtCLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3BDLGdCQUFRLElBQUksUUFBUSxDQUFDLEVBQUUsVUFBVSxFQUFFLGtCQUFrQixFQUFFLENBQUMsQ0FBQztPQUMxRCxNQUFNO0FBQ0wsZUFBTyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFLFNBQVMsQ0FBQyxDQUFDO09BQ3JEO0FBQ0QsYUFBTyxJQUFJLENBQUM7S0FDYixDQUFDOztBQUVGLFFBQUksQ0FBQyxtQkFBbUIsQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUN0QyxRQUFJLENBQUMsdUJBQXVCLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0dBRW5EOzs7Ozs7Ozs7OztBQXhFSyxxQkFBZSxHQUFHLGdEQUFnRDtBQUVwRSxzQkFBZ0IsR0FBRyxJQUFJIiwiZmlsZSI6Imhwbi9odHRwLWhhbmRsZXItcGF0Y2guZXMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdXRpbHMgZnJvbSAnLi4vY29yZS91dGlscyc7XG5pbXBvcnQgKiBhcyBodHRwIGZyb20gJy4uL2NvcmUvaHR0cCc7XG5pbXBvcnQgQ2xpcXpTZWN1cmVNZXNzYWdlIGZyb20gJy4vbWFpbic7XG5cbmNvbnN0IE9GRkVSX1RFTEVNRVRSWSA9ICdodHRwczovL29mZmVycy1hcGkuY2xpcXouY29tL2FwaS92MS9zYXZlc2lnbmFsJztcblxubGV0IHByb3h5SHR0cEhhbmRsZXIgPSBudWxsO1xuZXhwb3J0IGZ1bmN0aW9uIG92ZXJSaWRlQ2xpcXpSZXN1bHRzKCkge1xuICBpZiAodXRpbHMuZ2V0UHJlZigncHJveHlOZXR3b3JrJywgdHJ1ZSkgPT09IGZhbHNlKSByZXR1cm47XG5cbiAgaWYgKCFwcm94eUh0dHBIYW5kbGVyKSBwcm94eUh0dHBIYW5kbGVyID0gaHR0cC5kZWZhdWx0SHR0cEhhbmRsZXI7XG5cbiAgZnVuY3Rpb24gaHR0cEhhbmRsZXIobWV0aG9kLCB1cmwsIGNhbGxiYWNrLCBvbmVycm9yLCB0aW1lb3V0LCBkYXRhLCBzeW5jKSB7XG4gICAgaWYgKHVybC5zdGFydHNXaXRoKHV0aWxzLlJFU1VMVFNfUFJPVklERVIpICYmXG4gICAgICAgIHV0aWxzLmdldFByZWYoJ2hwbi1xdWVyeXYyJywgZmFsc2UpKSB7XG4gICAgICBjb25zdCBxdWVyeSA9IHVybC5yZXBsYWNlKCh1dGlscy5SRVNVTFRTX1BST1ZJREVSKSwgJycpO1xuICAgICAgY29uc3QgdWlkID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAwMDAwMDApO1xuICAgICAgQ2xpcXpTZWN1cmVNZXNzYWdlLnF1ZXJpZXNJRFt1aWRdID0gY2FsbGJhY2s7XG4gICAgICBDbGlxelNlY3VyZU1lc3NhZ2Uud0NyeXB0by5wb3N0TWVzc2FnZSh7XG4gICAgICAgIG1zZzogeyBhY3Rpb246ICdpbnN0YW50JyxcbiAgICAgICAgICAgICAgdHlwZTogJ2NsaXF6JyxcbiAgICAgICAgICAgICAgdHM6ICcnLFxuICAgICAgICAgICAgICB2ZXI6ICcxLjUnLFxuICAgICAgICAgICAgICBwYXlsb2FkOiBxdWVyeSxcbiAgICAgICAgICAgICAgcnA6IHV0aWxzLlJFU1VMVFNfUFJPVklERVIsXG4gICAgICAgIH0sXG4gICAgICAgIHVpZDogdWlkLFxuICAgICAgICB0eXBlOiAnaW5zdGFudCcsXG4gICAgICAgIHNvdXJjZW1hcDogQ2xpcXpTZWN1cmVNZXNzYWdlLnNvdXJjZU1hcCxcbiAgICAgICAgdXBrOiBDbGlxelNlY3VyZU1lc3NhZ2UudVBLLFxuICAgICAgICBkc3BrOiBDbGlxelNlY3VyZU1lc3NhZ2UuZHNQSyxcbiAgICAgICAgc3NwazogQ2xpcXpTZWN1cmVNZXNzYWdlLnNlY3VyZUxvZ2dlcixcbiAgICAgICAgcXVlcnlwcm94eWlwOiBDbGlxelNlY3VyZU1lc3NhZ2UucXVlcnlQcm94eUlQLFxuICAgICAgfSk7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9IGVsc2UgaWYgKHVybC5zdGFydHNXaXRoKHV0aWxzLlJFU1VMVFNfUFJPVklERVJfTE9HKSkge1xuICAgICAgY29uc3QgcXVlcnkgPSB1cmwucmVwbGFjZSgodXRpbHMuUkVTVUxUU19QUk9WSURFUl9MT0cpLCAnJyk7XG4gICAgICBjb25zdCB1aWQgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMDAwMDAwMCk7XG4gICAgICBDbGlxelNlY3VyZU1lc3NhZ2UucXVlcmllc0lEW3VpZF0gPSBjYWxsYmFjaztcbiAgICAgIENsaXF6U2VjdXJlTWVzc2FnZS53Q3J5cHRvLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgbXNnOiB7IGFjdGlvbjogJ2V4dGVuc2lvbi1yZXN1bHQtdGVsZW1ldHJ5JyxcbiAgICAgICAgICAgICAgdHlwZTogJ2NsaXF6JyxcbiAgICAgICAgICAgICAgdHM6ICcnLFxuICAgICAgICAgICAgICB2ZXI6ICcxLjUnLFxuICAgICAgICAgICAgICBwYXlsb2FkOiBxdWVyeSxcbiAgICAgICAgfSxcbiAgICAgICAgdWlkOiB1aWQsXG4gICAgICAgIHR5cGU6ICdpbnN0YW50JyxcbiAgICAgICAgc291cmNlbWFwOiBDbGlxelNlY3VyZU1lc3NhZ2Uuc291cmNlTWFwLFxuICAgICAgICB1cGs6IENsaXF6U2VjdXJlTWVzc2FnZS51UEssXG4gICAgICAgIGRzcGs6IENsaXF6U2VjdXJlTWVzc2FnZS5kc1BLLFxuICAgICAgICBzc3BrOiBDbGlxelNlY3VyZU1lc3NhZ2Uuc2VjdXJlTG9nZ2VyLFxuICAgICAgICBxdWVyeXByb3h5aXA6IENsaXF6U2VjdXJlTWVzc2FnZS5xdWVyeVByb3h5SVAsXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0gZWxzZSBpZiAodXJsID09PSB1dGlscy5TQUZFX0JST1dTSU5HKSB7XG4gICAgICBjb25zdCBiYXRjaCA9IEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICBpZiAoYmF0Y2gubGVuZ3RoID4gMCkge1xuICAgICAgICBiYXRjaC5mb3JFYWNoKGVhY2hNc2cgPT4ge1xuICAgICAgICAgIENsaXF6U2VjdXJlTWVzc2FnZS50ZWxlbWV0cnkoZWFjaE1zZyk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soeyAncmVzcG9uc2UnOiAne1wic3VjY2Vzc1wiOnRydWV9JyB9KTtcbiAgICB9IGVsc2UgaWYgKHVybCA9PT0gT0ZGRVJfVEVMRU1FVFJZKSB7XG4gICAgICBjb25zdCBiYXRjaCA9IEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICBDbGlxelNlY3VyZU1lc3NhZ2UudGVsZW1ldHJ5KGJhdGNoKTtcbiAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKHsgJ3Jlc3BvbnNlJzogJ3tcInN1Y2Nlc3NcIjp0cnVlfScgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBwcm94eUh0dHBIYW5kbGVyLmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgaHR0cC5vdmVycmlkZUh0dHBIYW5kbGVyKGh0dHBIYW5kbGVyKTtcbiAgaHR0cC5hZGRDb21wcmVzc2lvbkV4Y2x1c2lvbih1dGlscy5TQUZFX0JST1dTSU5HKTtcblxufVxuIl19